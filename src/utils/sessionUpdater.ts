import { getWalletInfo } from "./getWalletInfo";
import { serverLogger } from "./server-logger";
import { getWalletSession, updateWalletSession } from "./walletSession";

let isRunning = false;
let currentAbortController: AbortController | null = null;
let lastSessionId = "";

const res = `ok ${Date.now()}`;

export async function startSessionUpdater() {
  if (isRunning) return res; // –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ

  isRunning = true;

  const loop = async () => {
    const session = await getWalletSession();

    if (session?.address && session?.rpcUrl) {
      const currentSessionId = `${session.address}_${session.rpcUrl}`;

      if (lastSessionId !== currentSessionId && currentAbortController) {
        serverLogger.debug(
          "üõë Aborting previous request due to session change"
        );
        currentAbortController.abort();
      }

      lastSessionId = currentSessionId;
      currentAbortController = new AbortController();

      try {
        const newInfo = await getWalletInfo(
          session.address,
          session.rpcUrl,
          currentAbortController.signal
        );

        if (newInfo) updateWalletSession({ ...session, ...newInfo });

        serverLogger.debug("üîÑ Session updated", { sUrl: session.rpcUrl });
      } catch (e) {
        serverLogger.warn("‚ùå Session update failed:", { e });
      } finally {
        currentAbortController = null; // üßº –û–±–Ω—É–ª—è—î–º–æ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      }
    } else {
      serverLogger.warn("‚ùå Session not updated SESSION:", { session });
    }

    setTimeout(loop, 10000); // üîÅ –ø–æ–≤—Ç–æ—Ä
    return res;
  };

  return loop();
}
