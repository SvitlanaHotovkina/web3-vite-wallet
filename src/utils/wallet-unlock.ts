import { HDNodeWallet } from "ethers/wallet";
import { toUtf8Bytes } from "ethers";
import { getEncryptedWallet } from "@/utils/walletStorage";
import { createWalletSession, getWalletSession } from "./walletSession";
import { serverLogger } from "./server-logger";

// --- Web Crypto: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è ---
async function deriveKey(
  password: string,
  salt: Uint8Array
): Promise<CryptoKey> {
  const keyMaterial = await crypto.subtle.importKey(
    "raw",
    toUtf8Bytes(password),
    { name: "PBKDF2" },
    false,
    ["deriveKey"]
  );

  return crypto.subtle.deriveKey(
    {
      name: "PBKDF2",
      salt,
      iterations: 100_000,
      hash: "SHA-256",
    },
    keyMaterial,
    { name: "AES-GCM", length: 256 },
    false,
    ["decrypt"]
  );
}

// --- –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Base64 –≤ Uint8Array ---
function decodeBase64(encoded: string): Uint8Array {
  return new Uint8Array(
    atob(encoded)
      .split("")
      .map((char) => char.charCodeAt(0))
  );
}

// --- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ---
export async function unlockWallet(password: string) {
  try {
    serverLogger.debug("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...");

    const encryptedWallet = await getEncryptedWallet();
    if (!encryptedWallet) {
      throw new Error("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    const { ciphertext, iv, salt } = JSON.parse(encryptedWallet);
    const key = await deriveKey(password, decodeBase64(salt));

    serverLogger.debug("üîë –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É...");
    const decrypted = await crypto.subtle.decrypt(
      { name: "AES-GCM", iv: decodeBase64(iv) },
      key,
      decodeBase64(ciphertext)
    );

    const mnemonic = new TextDecoder().decode(decrypted);
    const wallet = HDNodeWallet.fromPhrase(mnemonic);

    const oldWalletSession = await getWalletSession();

    if (oldWalletSession?.address === wallet.address) {
      serverLogger.debug("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!");
    } else {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
      createWalletSession({
        address: wallet.address,
        network: "Ethereum",
        balance: "0.0",
      });
      serverLogger.debug(
        "‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω  –∏ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è!"
      );
    }

    return {
      mnemonic,
      address: wallet.address,
      privateKey: wallet.privateKey,
    };
  } catch (error) {
    serverLogger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–æ—à–µ–ª—å–∫–∞:", { error });
    throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!");
  }
}
